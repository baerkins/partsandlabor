// Grid Functions
// ==============

///
/// calc-gutter-width()
/// Calculate gutter width as a percentage based on target value
///
/// @param {string} $gutter-value - Width of gutter
///
/// @return {integer} value of percentage ( add `+ %`)
/// @since 1.0.0
/// @group parts
///
@function calc-gutter-width($gutter-value: $target-gutter) {

  // Get target gutter percentage
  @return (($gutter-value / 1px) / ($target-width  / 1px)) * 100;

}


///
/// calc-single-col-width()
/// Calculate single column width
///
/// @return {integer} value of percentage ( add `+ %`)
///
/// @since 1.0.0
/// @group parts
///
@function calc-single-col-width() {

  $gutter-width: calc-gutter-width();
  $gutter-area:  ($gutter-width * ($total-cols - 1));
  $remains:      (100 - $gutter-area);

  @return ( $remains / $total-cols );

}


///
/// calc-grid-col-width()
/// Calculate the width of X columns
///
/// @param {integer} $columns - Number of columns to take up
/// @param {string} $gutter-value - Width of gutter
///
/// @return {integer} value of percentage ( add `+ %`)
///
/// @since 1.0.0
/// @group parts
///
@function calc-grid-col-width($columns, $gutter-value, $include-gutter: false) {

  $gutter-width: calc-gutter-width($gutter-value);

  @if $calc {

    @if $include-gutter {

      $width: ((100 / $total-cols) * $columns) * 1%;;
      $column-offset: ($columns * $gutter-value) / ($total-cols);

      @return calc(#{$width} + #{$column-offset});

    } @else {

      $width: ((100 / $total-cols) * $columns) * 1%;;
      $column-percentage: ($columns / $total-cols) * ($target-gutter / 1px);
      $column-offset: $target-gutter - $column-percentage;

      @return calc(#{$width} - #{$column-offset});

    }

  } @else {

    $width: ((calc-single-col-width() * $columns) + ($gutter-width * ($columns - 1)));

    @if $include-gutter {

      $width: $width + $gutter-width;

    }


    // Attrs
    @return $width * 1%;



  }
}
