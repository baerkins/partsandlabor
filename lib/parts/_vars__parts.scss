// Grid Variables
// ==============

/// Total number of columns in grid
/// @type Integer
/// @group parts
$total-cols:    12 !default;

/// Target width of grid. When the grid is at this width,
/// the gutter value should match the $target-gutter variable
/// @type String
/// @group parts
$target-width:  1200px !default;

/// Target gutter width the grid. When the grid is at the width
/// of $target-width, the gutter values will match this variable.
/// @type String
/// @group parts
$target-gutter: 20px !default;


/// Grid Variable
/// Default values of the grid map object. You can match this
/// to create a custom grid to be used within `grid-col()`
/// @type Map
/// @group Parts
/// @since 1.4.0
$default-grid: (
  cols:   $total-cols,
  width:  $target-width,
  gutter: $target-gutter
);

/// Grid Variable
/// Optional Grid variable to create a grid without gutters.
/// @type Map
/// @group Parts
/// @since 1.4.0
$default-grid: (
  cols:   $total-cols,
  width:  $target-width,
  gutter: 0
);

// Breakpoints
// ===========

/// Breakpoint
/// @group parts
$xsmall: 480px !default;

/// Breakpoint
/// @group parts
$small:  760px !default;

/// Breakpoint
/// @group parts
$medium: 1024px !default;

/// Breakpoint
/// @group parts
$large:  1200px !default;

/// Breakpoint
/// @group parts
$xlarge: 1500px !default;


/// Default Breakpoint Attribute
/// @group parts
$default-breakpoint-attr: min-width;


/// Extra value to pad out breakpoints
/// @type String (pixel val)
/// @group parts
$default-breakpoint-offset: $target-gutter !default;

/// Extra value to pad out small breakpoint
/// @type String (pixel val)
/// @group parts
$breakpoint-offset-xsmall: $default-breakpoint-offset !default;

/// Extra value to pad out small breakpoint
/// @type String (pixel val)
/// @group parts
$breakpoint-offset-small: $default-breakpoint-offset !default;

/// Extra value to pad out breakpoints
/// @type String (pixel val)
/// @group parts
$breakpoint-offset-medium: $default-breakpoint-offset !default;

/// Extra value to pad out breakpoints
/// @type String (pixel val)
/// @group parts
$breakpoint-offset-large: $default-breakpoint-offset !default;

/// Extra value to pad out breakpoints
/// @type String (pixel val)
/// @group parts
$breakpoint-offset-xlarge: $default-breakpoint-offset !default;


// Breakpoint Values
// =================

/// Width of fluid container, percentage
/// @type String (percentage)
/// @group parts
$fluid-container:   90% !default;

/// Container width at breakpoint
/// @type String (pixel val)
/// @group parts
$xsmall-container:  $xsmall - ($breakpoint-offset-xsmall * 2) !default;

/// Container width at breakpoint
/// @type String (pixel val)
/// @group parts
$small-container:   $small - ($breakpoint-offset-small * 2) !default;

/// Container width at breakpoint
/// @type String (pixel val)
/// @group parts
$medium-container:  $medium - ($breakpoint-offset-medium * 2) !default;

/// Container width at breakpoint
/// @type String (pixel val)
/// @group parts
$large-container:   $large - ($breakpoint-offset-large * 2) !default;

/// Container width at breakpoint
/// @type String (pixel val)
/// @group parts
$xlarge-container:  $xlarge - ($breakpoint-offset-xlarge * 2) !default;



// Active Breakpoint List
// ======================

/// Sass Map of Breakpoints for adaptive container, mapped as `breakpoint: container-size`
/// If you want to remove a value, set it's -container value to `false`, such as `$xlarge-container: false`
///
/// @group parts
$active-breakpoints: (
  $xsmall: $xsmall-container,
  $small:  $small-container,
  $medium: $medium-container,
  $large:  $large-container,
  $xlarge: $xlarge-container
) !default;
