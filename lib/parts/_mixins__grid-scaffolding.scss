// Media Breakpoints
// =================

///
/// Create a new breakpoint. Use in conjunction with breakpoint variables.
///
/// @param {various} $size  - Either string (900px) or map (min-height: 900px), or false
/// @param {string}  $media [only screen] - Media type
///
/// @require {variable} default-breakpoint-attr
///
/// @example scss - Basic Usage Sass
///   div {
///     font-size: 12px;
///
///     // Use a breakpoint variable
///     @include break($medium) {
///       font-size: 16px;
///     }
///
///     // Use a px, em, or rem value
///     @include break(1024px) {
///       font-size: 16px;
///     }
///   }
///
///
///   div {
///     font-size: 16px;
///
///     // Use a map to include multiple breakpoint queries
///     @include break((min-width: 1024px, min-height: 1031px)) {
///       font-size: 10px;
///     }
///
///     // Set $size to false to only query by media type
///     @include break(false, print) {
///       font-size: 10px;
///     }
///   }
///
/// @group parts
/// @since 1.4.0
///
///
@mixin break($size, $media: only screen) {

  $_set-point: '';

  @if $size {
    @if type-of($size) == 'map' { // ex. (max-width: 900px, max-height, 700px)

      @each $attr, $val in $size {
        $_set-point: $_set-point + 'and (#{$attr}: #{$val})';
      }

    } @else { // Assume it's a value for default break

      $_set-point: 'and (#{$default-breakpoint-attr}: #{$size})';

    }

    @media #{$media} #{$_set-point} {
      @content;
    }

  } @else {
    @media #{$media} {
      @content;
    }
  }
}

// Grid Wrappers
// =============

///
/// Create a wrapper for a row of grid elements
///
/// @example scss - Basic Usage Sass
///   .row {
///     @include row;
///   }
///
/// @group parts
/// @since 1.0.0
///
@mixin row {
  @include clearfix;
  width: 100%;
}

///
/// Create a wrapper for a row of flexbox grid elements
///
/// @example scss - Basic Usage Sass
///   .flow-row {
///     @include flex-row;
///   }
///
/// @group parts
/// @since 1.0.0
///
@mixin flex-row($align: false, $justify: space-between, $reverse: false, $wrap: true) {
  display: flex;
  justify-content: $justify;
  width: 100%;

  @if $align {
    align-items: $align;
  }

  @if $reverse {
    flex-direction: row-reverse;
  }

  @if $wrap {
    flex-wrap: wrap;
  }

}

///
/// Create a container for content. If you wish not to use a breakpoint,
/// set that breakpoint variable to false. You can also pass a custom
/// map with specific custom breakpoints, just match the mapping of
/// the default, `$active-breakpoints`
///
/// @param {string} $width [$fluid-container] - Width of the container
/// @param {bool} $fluid [true] - Whether the container should always
/// be fluid or be adaptive. If false, max-widths will be set according
/// to `$active-breakpoints`
///
/// @example scss - Basic Usage Sass
///   .container {
///     @include container;
///   }
///
/// @group parts
/// @since 1.0.0
///
@mixin base-container($width: $fluid-container, $fluid: true, $breakpoints: $active-breakpoints) {
  margin-left: auto;
  margin-right: auto;
  width: $width;

  @if $fluid == false {

    @each $bp, $bpc in $breakpoints {

      @if $bpc {
        @include break($bp) {
          max-width: $bpc;
        }
      }
    }
  }
}
