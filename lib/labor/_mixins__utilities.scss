// ---TRANSITIONS------------------------------------------------------------->

///
/// Standard Transition
///
/// @param {string} $attr [all] - Attribute to be transitioned
///
/// @example scss - Basic Usage Sass
///   a {
///     @include standard-trans();
///   }
///
/// @since 1.0.0
/// @group labor
///
@mixin standard-trans($attr: all) {
  transition: $attr $standard-trans-time $standard-trans-timing-func $standard-trans-time-delay;
}

///
/// Long Transition
///
/// @param {string} $attr [all] - Attribute to be transitioned
///
/// @example scss - Basic Usage Sass
///   a {
///     @include long-trans();
///   }
///
/// @since 1.0.0
/// @group labor
///
@mixin long-trans($attr: all) {
  transition: $attr $long-trans-time $long-trans-timing-func $long-trans-time-delay;
}


// ---LAYOUT------------------------------------------------------------------>

///
/// Clearfix - your run of the mill modern clearfix
///
/// @example scss - Basic Usage Sass
///   .float-container {
///     @include long-trans();
///   }
///
/// @link https://css-tricks.com/snippets/css/clear-fix/
///
/// @since 1.0.0
/// @group labor
///
@mixin clearfix {

  &::after {
    clear: both;
    content: '';
    display: table;
  }
}

///
/// Cover relative parent
///
/// @example scss - Basic Usage Sass
///   .cover {
///     @include cover();
///   }
///
/// @since 1.0.0
/// @group labor
///
@mixin cover {
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
}

///
/// Centers item in relative parent
///
/// @param {string} $transform [translate(-50%,-50%)] - transform property
///
/// @example scss - Basic Usage Sass
///   .centered-element {
///     @include center();
///   }
///
/// @example scss - Basic Usage Sass
///   .centered-element-with-rotate {
///     @include center( translate3d(-50%,-50%,0) scale(45deg) );
///   }
///
/// @since 1.0.0
/// @group labor
///
@mixin center($transform: translate(-50%, -50%)) {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: $transform;
}

///
/// Hide an element visually, but allow access to screen readers
///
/// @link https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe#.tpuoch56u
///
/// @example scss - Basic Usage Sass
///   .screen-reader-text {
///     @include visually-hidden();
///   }
///
/// @since 1.0.0
/// @group labor
///
@mixin visually-hidden {
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

///
/// Fill background with image
///
/// @param {string} $pos [center]  A valid background position
///
/// @example scss - Basic Usage Sass
///   .fill-image {
///     background-image: url('../img/cool-image.jpg');
///     @include bkg-img();
///   }
///
/// @since 1.0.0
/// @group labor
///
@mixin bkg-img($pos: center) {
  background-position: $pos;
  background-repeat: no-repeat;
  background-size: cover;
}

// Fit image within space
@mixin img-fit($pos: center) {
  object-fit: cover;
  object-position: $pos;
}

// ---FORMS------------------------------------------------------------------->

///
/// Placeholder - use within input or on its own for global styles
///
/// @example scss - Basic Usage Sass
///   input {
///     @include placeholder {
///       color: #bada55;
///     }
///  }
///
/// @since 1.0.0
/// @group labor
///
@mixin placeholder {
  ::placeholder {@content}
}

///
/// Valid - for styling valid form fields
///
/// @example scss - Basic Usage Sass
///   input {
///     @include valid {
///       border: 2px solid #bada55;
///     }
///  }
///
/// @since 1.0.0
/// @group labor
///
@mixin valid {

  &:valid,
  &:empty:valid,
  &:focus:empty:valid {
    @content;
  }
}

///
/// Invalid - for styling invalid form fields
///
/// @example scss - Basic Usage Sass
///   input {
///     @include invalid {
///       border: 2px solid #badbad;
///     }
///  }
///
/// @since 1.0.0
/// @group labor
///
@mixin invalid {
  &:invalid,
  &:focus:invalid {
    @content;
  }
}

// ---FONT-FACE--------------------------------------------------------------->

///
/// Font Face
///
/// @param {string} $name - Name for font-family
/// @param {string} $path - Relative path to files from output css sheet
/// @param {string} $weight [normal] - `font-weight`
/// @param {string} $style [normal] - 'font-style'
/// @param {string} $exts [eot woff2 woff ttf svg] - List of file extensions to include, sep with a space
///
/// @link https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6
///
/// @example scss - Basic Usage Sass
///   @include font-face { 'Circular', '../fonts/circular-book' }
///   @include font-face { 'Circular', '../fonts/circular-bold', 600 }
///   @include font-face { 'Circular', '../fonts/circular-book-italic', 400, italic }
///
/// @since 1.0.0
/// @group labor
///
@mixin font-face($name, $path, $weight: normal, $style: normal, $exts: eot woff2 woff ttf svg) {

  $src: null;

  $extmods: (
    eot: '?',
    svg: '#' + str-replace($name, ' ', '_')
  );

  $formats: (
    otf: 'opentype',
    ttf: 'truetype'
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}
